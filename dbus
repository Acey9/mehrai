#!/usr/bin/env python
# -*- coding: utf-8 -*-

import time, sys, string, json
import urllib, urllib2, hashlib, os
import itertools, mimetools, mimetypes
from watchdog.observers import Observer  
from watchdog.events import PatternMatchingEventHandler


# Kicks shit dropped by skids on yr honeypots over to yr Viper/Snakepit instance
PRINTABLE_CHARACTERS = string.letters + string.digits + string.punctuation + " "
VIPER_URL_ADD = "http://viper:8080/file/add"


def convert2printable(s):
    if not isinstance(s, basestring) or isPrintable(s):
        return s
    return "".join(convertChar(c) for c in s)


def convertChar(c):
    if c in PRINTABLE_CHARACTERS:
        return c
    else:
        return "?"


def isPrintable(s):
    for c in s:
        if not c in PRINTABLE_CHARACTERS:
            return False
    return True


def get_sha256(fileName):
    hash = hashlib.sha256()
    with open(fileName) as f:
        for chunk in iter(lambda: f.read(4096), ""):
            hash.update(chunk)
    return hash.hexdigest()


def convertDirtyDict2ASCII(data):
    if data is None or isinstance(data, (bool, int, long, float)):
        return data
    if isinstance(data, basestring):
        return convert2printable(data)
    if isinstance(data, list):
        return [convertDirtyDict2ASCII(val) for val in data]
    if isinstance(data, OrderedDict):
        return [[convertDirtyDict2ASCII(k), convertDirtyDict2ASCII(v)] for k, v in data.iteritems()]
    if isinstance(data, dict):
        if all(isinstance(k, basestring) for k in data):
            return {k: convertDirtyDict2ASCII(v) for k, v in data.iteritems()}
        return [[convertDirtyDict2ASCII(k), convertDirtyDict2ASCII(v)] for k, v in data.iteritems()]
    if isinstance(data, tuple):
        return [convertDirtyDict2ASCII(val) for val in data]
    if isinstance(data, set):
        return [convertDirtyDict2ASCII(val) for val in data]
    
    return data


class MultiPartForm(object):
    """Accumulate the data to be used when posting a form."""

    def __init__(self):
        self.form_fields = []
        self.files = []
        self.boundary = mimetools.choose_boundary()
        return
    

    def get_content_type(self):
        return 'multipart/form-data; boundary=%s' % self.boundary


    def add_field(self, name, value):
        value = convertDirtyDict2ASCII(value)
        
        """Add a simple field to the form data."""
        self.form_fields.append((name, value))
        return


    def add_file(self, fieldname, filename, fileHandle, mimetype=None):
        filename = convertDirtyDict2ASCII(filename)
        
        """Add a file to be uploaded."""
        body = fileHandle.read()
        if mimetype is None:
            mimetype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'
        self.files.append((fieldname, filename, mimetype, body))
        return
    

    def add_file_data(self, fieldname, filename, file_data, mimetype=None):
        filename = convertDirtyDict2ASCII(filename)
        
        """Add a file to be uploaded."""
        if mimetype is None:
            mimetype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'
        self.files.append((fieldname, filename, mimetype, file_data))
        return


    def __str__(self):
        """Return a string representing the form data, including attached files."""
        # Build a list of lists, each containing "lines" of the
        # request.  Each part is separated by a boundary string.
        # Once the list is built, return a string where each
        # line is separated by '\r\n'.  
        parts = []
        part_boundary = '--' + self.boundary
        
        # Add the form fields
        parts.extend(
            [ part_boundary,
              'Content-Disposition: form-data; name="%s"' % name,
              '',
              value,
            ]
            for name, value in self.form_fields
            )
        
        # Add the files to upload
        parts.extend(
            [ part_boundary,
              'Content-Disposition: file; name="%s"; filename="%s"' % \
                 (field_name, filename),
              'Content-Type: %s' % content_type,
              '',
              body,
            ]
            for field_name, filename, content_type, body in self.files
            )
        
        # Flatten the list and add closing boundary marker,
        # then return CR+LF separated data
        flattened = list(itertools.chain(*parts))
        flattened.append('--' + self.boundary + '--')
        flattened.append('')
        return '\r\n'.join(flattened)


class FileHandler(PatternMatchingEventHandler):

    def process(self, event):
        #shutil.copy2(event.src_path, '/tmp')        

        if event.is_directory is False and os.path.exists(event.src_path) and os.path.basename(event.src_path).startswith('.') is False and event.src_path is not '/var/run/utmp' and os.path.getsize(event.src_path) != 0:
            self.upload(event.src_path)
            fileName = os.path.basename(event.src_path)
            sha256 = get_sha256(event.src_path)
            print '[!] Sending ' + event.src_path + ' to Viper\n[!] sha256: ' + sha256
            self.binsFromProc(sha256, 0)


    def binsFromProc(self, sha256, passes):
        pids = [pid for pid in os.listdir('/proc') if pid.isdigit()]
        if passes <= 1:
            for pid in pids:
                try:
                    leProc = open('/proc/%s/cmdline' % pid).read().split('\0')
                    if pid is os.getpid() or pid is '1' or 'telnetd' in leProc or 'python' in leProc or 'dbus' in leProc:
                        pass
                    else:
                        self.upload(os.path.join('/proc', pid, 'exe'))
                        #fileName = open('/proc/%s/cmdline' % pid).read().split('\0')
                        print '[!] Sending from /proc/pid/exe: ' + sha256
                        os.system('killall $(cat /proc/%s/cmdline) 2>/dev/null' % pid) 
                except IOError: # proc has already terminated
                    pass
            passes = passes + 1
            self.binsFromProc(sha256, passes)
        else:
            time.sleep(15)
            os.system('telnetd 0.0.0.0:23')


    # LOG THY TTY?
    def on_modified(self, event):
        self.process(event)


    def on_created(self, event):
        self.process(event)
      

    def upload(self, filePath):
        rawFile = open(filePath, 'rb')

        try:
            form = MultiPartForm()
            form.add_file('file', filePath, fileHandle=rawFile)
            form.add_field('tags', 'busypot')
        
            request = urllib2.Request(VIPER_URL_ADD)
            body = str(form)

            request.add_header('Content-type', form.get_content_type())
            request.add_header('Content-length', len(body))
            request.add_data(body)
        
            response_data = urllib2.urlopen(request).read() 
            reponsejson = json.loads(response_data)
            
        except urllib2.URLError as e:
            print "[!] File already exists: %s" % e
            pass
        except ValueError as e:
            print "Unable to convert response to JSON: %s" % e
            pass


if __name__ == '__main__':
    args = sys.argv[1:]
    
    print "starting application in 3...2...jk it's already started"
    observer = Observer()
    observer.schedule(FileHandler(), path=args[0] if args else '/', recursive=False)
    observer.start()

    try:
        while True:
            time.sleep(0.000001)
    except KeyboardInterrupt:
        observer.stop()

    observer.join()
